import { BaseToken, IPOSClientConfig, ITransactionOption, TYPE_AMOUNT, Web3SideChainClient } from "@maticnetwork/maticjs";
export declare class ValidatorShare extends BaseToken<IPOSClientConfig> {
    constructor(client: Web3SideChainClient<IPOSClientConfig>, address: string);
    protected getMethod(name: string, ...args: any[]): Promise<import("@maticnetwork/maticjs").BaseContractMethod>;
    getExchangeRate(): Promise<unknown>;
    getOldUnbonds(address: string): Promise<unknown>;
    getNewUnbonds(address: string, nonce: any): Promise<unknown>;
    getLiquidRewards(address: string): Promise<unknown>;
    getMinAmountToStake(): Promise<unknown>;
    /**
     * return balance of shares of delegator
     *
     * @return {*}
     * @memberof ValidatorShare
     */
    getBalance(address: string): Promise<unknown>;
    /**
     * delegate amount to validator
     *
     *  internally it calls method - **buyVoucher**
     *
     * @param {TYPE_AMOUNT} amount
     * @param {TYPE_AMOUNT} minAmountToStake
     * @return {*}
     * @memberof ValidatorShare
     */
    delegateAmount(amount: TYPE_AMOUNT, minAmountToStake: TYPE_AMOUNT, option?: ITransactionOption): Promise<import("@maticnetwork/maticjs").ITransactionWriteResult>;
    /**
     *  unstake delegated amount
     *
     * internally it calls - **sellVoucher_new**
     *
     * @param {TYPE_AMOUNT} amount
     * @param {TYPE_AMOUNT} maximumSharesToBurn
     * @return {*}
     * @memberof ValidatorShare
     */
    removeDelegatedAmount(amount: TYPE_AMOUNT, maximumSharesToBurn: TYPE_AMOUNT, option?: ITransactionOption): Promise<import("@maticnetwork/maticjs").ITransactionWriteResult>;
    /**
     * claim the delegated amount by supplying nonce
     *
     * internally it calls - **unstakeClaimTokens_new**
     *
     * @param {TYPE_AMOUNT} nonce
     * @return {*}
     * @memberof ValidatorShare
     */
    claimDelegatedAmount(nonce: TYPE_AMOUNT, option?: ITransactionOption): Promise<import("@maticnetwork/maticjs").ITransactionWriteResult>;
    /**
     * restake the earned rewards
     *
     * @return {*}
     * @memberof ValidatorShare
     */
    restakeReward(option?: ITransactionOption): Promise<import("@maticnetwork/maticjs").ITransactionWriteResult>;
    /**
     * withdraw earned rewards
     *
     * @return {*}
     * @memberof ValidatorShare
     */
    withdrawRewards(option?: ITransactionOption): Promise<import("@maticnetwork/maticjs").ITransactionWriteResult>;
}
