import { BaseToken, IPOSClientConfig, ITransactionOption, TYPE_AMOUNT, Web3SideChainClient } from "@maticnetwork/maticjs";
export declare class StakeManager extends BaseToken<IPOSClientConfig> {
    constructor(client: Web3SideChainClient<IPOSClientConfig>, address: string);
    protected getMethod(name: string, ...args: any[]): Promise<import("@maticnetwork/maticjs").BaseContractMethod>;
    getCheckPointReward(): Promise<unknown>;
    getWithdrawalDelay(): Promise<unknown>;
    getLockedStatus(): Promise<unknown>;
    getValidatorDetails(validatorId: any): Promise<unknown>;
    getMinHeimdallFee(): Promise<string>;
    getMinDeposit(): Promise<string>;
    stakeFor(userAddress: string, amount: TYPE_AMOUNT, heimdallFee: TYPE_AMOUNT, acceptDelegation: any, signerPubkey: any, option?: ITransactionOption): Promise<import("@maticnetwork/maticjs").ITransactionWriteResult>;
    /**
     * add fee to heimdall chain for doing transacion for validator
     *
     * @param {string} userAddress
     * @param {TYPE_AMOUNT} amount
     * @return {*}
     * @memberof StakeManager
     */
    addTopUpForHeimdallFee(userAddress: string, amount: TYPE_AMOUNT, option?: ITransactionOption): Promise<import("@maticnetwork/maticjs").ITransactionWriteResult>;
    unStake(validatorId: any, option?: ITransactionOption): Promise<import("@maticnetwork/maticjs").ITransactionWriteResult>;
    claimStakedAmount(validatorId: any, option?: ITransactionOption): Promise<import("@maticnetwork/maticjs").ITransactionWriteResult>;
    reStake(validatorId: any, amount: TYPE_AMOUNT, validatorStake: boolean, option?: ITransactionOption): Promise<import("@maticnetwork/maticjs").ITransactionWriteResult>;
    withdrawRewardForValidator(validatorId: any, option?: ITransactionOption): Promise<import("@maticnetwork/maticjs").ITransactionWriteResult>;
    migrateDelegation(fromValidatorId: any, toValidatorId: any, amount: TYPE_AMOUNT, option?: ITransactionOption): Promise<import("@maticnetwork/maticjs").ITransactionWriteResult>;
    updateCommissionRate(validatorId: TYPE_AMOUNT, validatorCommission: TYPE_AMOUNT, option?: ITransactionOption): Promise<import("@maticnetwork/maticjs").ITransactionWriteResult>;
    updateSigner(validatorId: TYPE_AMOUNT, publicKey: string, option?: ITransactionOption): Promise<import("@maticnetwork/maticjs").ITransactionWriteResult>;
    /**
     * Get total matic staked
     *
     * @return {*}
     * @memberof StakeManager
     */
    getTotalStake(): Promise<string>;
}
