{"version":3,"sources":["webpack://matic-staking/webpack/bootstrap","webpack://matic-staking/external \"@maticnetwork/maticjs\"","webpack://matic-staking/./src/contracts/stake_manager.ts","webpack://matic-staking/./src/contracts/validator_share.ts","webpack://matic-staking/./src/contracts/matic_token.ts","webpack://matic-staking/./src/index.ts"],"names":["installedModules","__webpack_require__","moduleId","exports","module","i","l","modules","call","m","c","d","name","getter","o","Object","defineProperty","enumerable","get","r","Symbol","toStringTag","value","t","mode","__esModule","ns","create","key","bind","n","object","property","prototype","hasOwnProperty","p","s","require","client","address","isParent","bridgeType","getMethod","this","getContract","then","contract","method","args","getCheckPointReward","processRead","getWithdrawalDelay","getLockedStatus","getValidatorDetails","validatorId","getMinHeimdallFee","getMinDeposit","stakeFor","userAddress","amount","heimdallFee","acceptDelegation","signerPubkey","option","toHex","processWrite","addTopUpForHeimdallFee","unStake","claimStakedAmount","reStake","validatorStake","withdrawRewardForValidator","migrateDelegation","fromValidatorId","toValidatorId","updateCommissionRate","validatorCommission","updateSigner","publicKey","getTotalStake","getExchangeRate","getOldUnbonds","getNewUnbonds","nonce","getLiquidRewards","getMinAmountToStake","getBalance","delegateAmount","minAmountToStake","removeDelegatedAmount","maximumSharesToBurn","claimDelegatedAmount","restakeReward","withdrawRewards","stakeManagerAddress","getAllowanceForStakingManager","approveMaxForStakingManager","init","config","_","mainPlasmaContracts","stakeManagerProxyAddress","StakeManagerProxy","maticTokenAddress","Tokens","MaticToken","stakeManager","maticToken","validatorShare"],"mappings":"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","file":"matic-staking.node.min.js","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 1);\n","module.exports = require(\"@maticnetwork/maticjs\");","import { BaseToken, Converter, IPOSClientConfig, ITransactionOption, TYPE_AMOUNT, Web3SideChainClient } from \"@maticnetwork/maticjs\";\r\n\r\nexport class StakeManager extends BaseToken<IPOSClientConfig> {\r\n\r\n    constructor(client: Web3SideChainClient<IPOSClientConfig>, address: string) {\r\n        super(\r\n            {\r\n                isParent: true,\r\n                address: address,\r\n                name: \"StakeManager\",\r\n                bridgeType: 'plasma'\r\n            },\r\n            client\r\n        );\r\n    }\r\n\r\n    protected getMethod(name: string, ...args) {\r\n        return this.getContract().then(contract => {\r\n            return contract.method(name, ...args);\r\n        });\r\n    }\r\n\r\n    getCheckPointReward() {\r\n        return this.getMethod(\"CHECKPOINT_REWARD\").then(method => {\r\n            return this.processRead(method);\r\n        });\r\n    }\r\n\r\n    getWithdrawalDelay() {\r\n        return this.getMethod(\"WITHDRAWAL_DELAY\").then(method => {\r\n            return this.processRead(method);\r\n        });\r\n    }\r\n\r\n    getLockedStatus() {\r\n        return this.getMethod(\"locked\").then(method => {\r\n            return this.processRead(method);\r\n        });\r\n    }\r\n\r\n    getValidatorDetails(validatorId) {\r\n        return this.getMethod(\"validators\", validatorId).then(method => {\r\n            return this.processRead(method);\r\n        });\r\n    }\r\n\r\n    getMinHeimdallFee() {\r\n        return this.getMethod(\"minHeimdallFee\").then(method => {\r\n            return this.processRead<string>(method);\r\n        });\r\n    }\r\n\r\n    getMinDeposit() {\r\n        return this.getMethod(\"minDeposit\").then(method => {\r\n            return this.processRead<string>(method);\r\n        });\r\n    }\r\n\r\n\r\n    stakeFor(userAddress: string, amount: TYPE_AMOUNT, heimdallFee: TYPE_AMOUNT, acceptDelegation, signerPubkey, option?: ITransactionOption) {\r\n        return this.getMethod(\r\n            \"stakeFor\",\r\n            Converter.toHex(userAddress),\r\n            Converter.toHex(amount),\r\n            Converter.toHex(heimdallFee),\r\n            acceptDelegation,\r\n            signerPubkey\r\n        ).then(method => {\r\n            return this.processWrite(method, option);\r\n        });\r\n    }\r\n\r\n    /**\r\n     * add fee to heimdall chain for doing transacion for validator\r\n     *\r\n     * @param {string} userAddress\r\n     * @param {TYPE_AMOUNT} amount\r\n     * @return {*} \r\n     * @memberof StakeManager\r\n     */\r\n    addTopUpForHeimdallFee(userAddress: string, amount: TYPE_AMOUNT, option?: ITransactionOption) {\r\n        return this.getMethod(\r\n            \"topUpForFee\",\r\n            Converter.toHex(userAddress),\r\n            Converter.toHex(amount),\r\n        ).then(method => {\r\n            return this.processWrite(method, option);\r\n        });\r\n    }\r\n\r\n    unStake(validatorId, option?: ITransactionOption) {\r\n        return this.getMethod(\r\n            \"unstake\",\r\n            Converter.toHex(validatorId)\r\n        ).then(method => {\r\n            return this.processWrite(method, option);\r\n        });\r\n    }\r\n\r\n    claimStakedAmount(validatorId, option?: ITransactionOption) {\r\n        return this.getMethod(\r\n            \"unstakeClaim\",\r\n            Converter.toHex(validatorId)\r\n        ).then(method => {\r\n            return this.processWrite(method, option);\r\n        });\r\n    }\r\n\r\n    reStake(validatorId, amount: TYPE_AMOUNT, validatorStake: boolean, option?: ITransactionOption) {\r\n        return this.getMethod(\r\n            \"restake\",\r\n            Converter.toHex(validatorId),\r\n            Converter.toHex(amount),\r\n            validatorStake\r\n\r\n        ).then(method => {\r\n            return this.processWrite(method, option);\r\n        });\r\n    }\r\n\r\n    withdrawRewardForValidator(validatorId, option?: ITransactionOption) {\r\n        return this.getMethod(\r\n            \"withdrawRewards\",\r\n            Converter.toHex(validatorId)\r\n        ).then(method => {\r\n            return this.processWrite(method, option);\r\n        });\r\n    }\r\n\r\n    migrateDelegation(fromValidatorId, toValidatorId, amount: TYPE_AMOUNT, option?: ITransactionOption) {\r\n        return this.getMethod(\r\n            \"migrateDelegation\",\r\n            Converter.toHex(fromValidatorId),\r\n            Converter.toHex(toValidatorId),\r\n            Converter.toHex(amount)\r\n        ).then(method => {\r\n            return this.processWrite(method, option);\r\n        });\r\n    }\r\n\r\n    updateCommissionRate(validatorId: TYPE_AMOUNT, validatorCommission: TYPE_AMOUNT, option?: ITransactionOption) {\r\n        return this.getMethod(\r\n            \"updateCommissionRate\",\r\n            Converter.toHex(validatorId),\r\n            Converter.toHex(validatorCommission),\r\n        ).then(method => {\r\n            return this.processWrite(method, option);\r\n        });\r\n    }\r\n\r\n    updateSigner(validatorId: TYPE_AMOUNT, publicKey: string, option?: ITransactionOption) {\r\n        return this.getMethod(\r\n            \"updateSigner\",\r\n            Converter.toHex(validatorId),\r\n            publicKey,\r\n        ).then(method => {\r\n            return this.processWrite(method, option);\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Get total matic staked\r\n     *\r\n     * @return {*} \r\n     * @memberof StakeManager\r\n     */\r\n    getTotalStake() {\r\n        return this.getMethod(\"currentValidatorSetTotalStake\").then(method => {\r\n            return this.processRead<string>(method);\r\n        });\r\n    }\r\n\r\n}","import { BaseToken, Converter, IPOSClientConfig, ITransactionOption, TYPE_AMOUNT, Web3SideChainClient } from \"@maticnetwork/maticjs\";\r\n\r\nexport class ValidatorShare extends BaseToken<IPOSClientConfig> {\r\n\r\n    constructor(client: Web3SideChainClient<IPOSClientConfig>, address: string) {\r\n        super(\r\n            {\r\n                isParent: true,\r\n                address: address,\r\n                name: \"ValidatorShare\",\r\n                bridgeType: 'plasma'\r\n            },\r\n            client\r\n        );\r\n    }\r\n\r\n    protected getMethod(name: string, ...args) {\r\n        return this.getContract().then(contract => {\r\n            return contract.method(name, ...args);\r\n        });\r\n    }\r\n\r\n    getExchangeRate() {\r\n        return this.getMethod(\"exchangeRate\").then(method => {\r\n            return this.processRead(method);\r\n        });\r\n    }\r\n\r\n    getOldUnbonds(address: string) {\r\n        return this.getMethod(\"unbonds\", address).then(method => {\r\n            return this.processRead(method);\r\n        });\r\n    }\r\n\r\n    getNewUnbonds(address: string, nonce) {\r\n        return this.getMethod(\"unbonds_new\", address, nonce).then(method => {\r\n            return this.processRead(method);\r\n        });\r\n    }\r\n\r\n\r\n    getLiquidRewards(address: string) {\r\n        return this.getMethod(\"getLiquidRewards\", address).then(method => {\r\n            return this.processRead(method);\r\n        });\r\n    }\r\n\r\n    getMinAmountToStake() {\r\n        return this.getMethod(\"minAmount\").then(method => {\r\n            return this.processRead(method);\r\n        });\r\n    }\r\n\r\n    /**\r\n     * return balance of shares of delegator\r\n     *\r\n     * @return {*} \r\n     * @memberof ValidatorShare\r\n     */\r\n    getBalance(address: string) {\r\n        return this.getMethod(\"balanceOf\", address).then(method => {\r\n            return this.processRead(method);\r\n        });\r\n    }\r\n\r\n    /**\r\n     * delegate amount to validator\r\n     *\r\n     *  internally it calls method - **buyVoucher**\r\n     * \r\n     * @param {TYPE_AMOUNT} amount\r\n     * @param {TYPE_AMOUNT} minAmountToStake\r\n     * @return {*} \r\n     * @memberof ValidatorShare\r\n     */\r\n    delegateAmount(amount: TYPE_AMOUNT, minAmountToStake: TYPE_AMOUNT, option?: ITransactionOption) {\r\n        return this.getMethod(\r\n            \"buyVoucher\",\r\n            Converter.toHex(amount),\r\n            Converter.toHex(minAmountToStake)\r\n        ).then(method => {\r\n            return this.processWrite(method, option);\r\n        });\r\n    }\r\n\r\n    /**\r\n     *  unstake delegated amount\r\n     *\r\n     * internally it calls - **sellVoucher_new**\r\n     * \r\n     * @param {TYPE_AMOUNT} amount\r\n     * @param {TYPE_AMOUNT} maximumSharesToBurn\r\n     * @return {*} \r\n     * @memberof ValidatorShare\r\n     */\r\n    removeDelegatedAmount(amount: TYPE_AMOUNT, maximumSharesToBurn: TYPE_AMOUNT, option?: ITransactionOption) {\r\n        return this.getMethod(\r\n            \"sellVoucher_new\",\r\n            Converter.toHex(amount),\r\n            Converter.toHex(maximumSharesToBurn)\r\n        ).then(method => {\r\n            return this.processWrite(method, option);\r\n        });\r\n    }\r\n\r\n    /**\r\n     * claim the delegated amount by supplying nonce\r\n     *\r\n     * internally it calls - **unstakeClaimTokens_new**\r\n     * \r\n     * @param {TYPE_AMOUNT} nonce\r\n     * @return {*} \r\n     * @memberof ValidatorShare\r\n     */\r\n    claimDelegatedAmount(nonce: TYPE_AMOUNT, option?: ITransactionOption) {\r\n        return this.getMethod(\r\n            \"unstakeClaimTokens_new\",\r\n            Converter.toHex(nonce),\r\n        ).then(method => {\r\n            return this.processWrite(method, option);\r\n        });\r\n    }\r\n\r\n    /**\r\n     * restake the earned rewards\r\n     *\r\n     * @return {*} \r\n     * @memberof ValidatorShare\r\n     */\r\n    restakeReward(option?: ITransactionOption) {\r\n        return this.getMethod(\r\n            \"restake\",\r\n        ).then(method => {\r\n            return this.processWrite(method, option);\r\n        });\r\n    }\r\n\r\n    /**\r\n     * withdraw earned rewards\r\n     *\r\n     * @return {*} \r\n     * @memberof ValidatorShare\r\n     */\r\n    withdrawRewards(option?: ITransactionOption) {\r\n        return this.getMethod(\r\n            \"withdrawRewards\",\r\n        ).then(method => {\r\n            return this.processWrite(method, option);\r\n        });\r\n    }\r\n\r\n\r\n\r\n}","import { BaseToken, IPOSClientConfig, ITransactionOption, MAX_AMOUNT, Web3SideChainClient } from \"@maticnetwork/maticjs\";\r\n\r\nexport class MaticToken extends BaseToken<IPOSClientConfig> {\r\n\r\n    stakeManagerAddress: string;\r\n\r\n    constructor(client: Web3SideChainClient<IPOSClientConfig>, address: string, stakeManagerAddress: string) {\r\n        super(\r\n            {\r\n                isParent: true,\r\n                address: address,\r\n                name: \"ERC20\",\r\n                bridgeType: 'plasma'\r\n            },\r\n            client\r\n        );\r\n        this.stakeManagerAddress = stakeManagerAddress;\r\n    }\r\n\r\n    protected getMethod(name: string, ...args) {\r\n        return this.getContract().then(contract => {\r\n            return contract.method(name, ...args);\r\n        });\r\n    }\r\n\r\n    getAllowanceForStakingManager(userAddress: string) {\r\n        return this.getMethod(\r\n            \"allowance\",\r\n            userAddress,\r\n            this.stakeManagerAddress\r\n        ).then(method => {\r\n            return this.processRead(method);\r\n        });\r\n    }\r\n\r\n    approveMaxForStakingManager(option?: ITransactionOption) {\r\n        return this.getMethod(\r\n            \"approve\",\r\n            this.stakeManagerAddress,\r\n            MAX_AMOUNT\r\n        ).then(method => {\r\n            return this.processWrite(method, option);\r\n        });\r\n    }\r\n\r\n    getBalance(userAddress: string) {\r\n        return this.getMethod(\r\n            \"balanceOf\",\r\n            userAddress,\r\n        ).then(method => {\r\n            return this.processRead(method);\r\n        });\r\n    }\r\n}","import { BridgeClient, IPOSClientConfig } from \"@maticnetwork/maticjs\";\r\nimport { MaticToken, StakeManager, ValidatorShare } from \"./contracts\";\r\n\r\nexport class StakingClient extends BridgeClient<IPOSClientConfig> {\r\n    stakeManager: StakeManager;\r\n    maticToken: MaticToken;\r\n\r\n    init(config: IPOSClientConfig) {\r\n        const client = this.client;\r\n        return client.init(config).then(_ => {\r\n            const mainPlasmaContracts = client.mainPlasmaContracts;\r\n            const stakeManagerProxyAddress = mainPlasmaContracts.StakeManagerProxy;\r\n            const maticTokenAddress = mainPlasmaContracts.Tokens.MaticToken;\r\n            this.stakeManager = new StakeManager(client, stakeManagerProxyAddress);\r\n            this.maticToken = new MaticToken(client, maticTokenAddress, stakeManagerProxyAddress);\r\n        });\r\n    }\r\n\r\n    validatorShare(address: string) {\r\n        return new ValidatorShare(\r\n            this.client,\r\n            address\r\n        );\r\n    }\r\n\r\n}"],"sourceRoot":""}